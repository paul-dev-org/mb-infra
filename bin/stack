import * as cdk from "aws-cdk-lib";
import { Construct } from "constructs";
import { InfraConfig } from "mb-infra";
import { Vpc } from "aws-cdk-lib/aws-ec2";
import { Cluster } from "aws-cdk-lib/aws-ecs";

type MbInfraProps = cdk.StackProps & InfraConfig;

export class InfraStack extends cdk.Stack {
    constructor(scope: Construct, id: string, props: MbInfraProps) {
        super(scope, id, props);

        const stage = this.node.tryGetContext("stage") as string;

        const vpc = new Vpc(this, `${stage}/vpc`, {
            maxAzs: props.vpc.noOfAzs,
            natGateways: props.vpc.createNatGateway ? props.vpc.noOfNatGateways : 0,
        });

        const cluster = new Cluster(this, `${stage}/cluster`, {
            vpc,
        });

        // const lb = new ApplicationLoadBalancer(this, `${props.stage}/alb`, {
        //     vpc,
        //     internetFacing: true,
        // });

        // props.apps.forEach((app) => {
        //     const ecr = new Repository(this, `${props.stage}-${app.name}`, {
        //         repositoryName: app.name,
        //         imageTagMutability: TagMutability.IMMUTABLE,
        //     });
        //
        //     const secrets = new SsmSecrets(this, `${props.stage}/${app.name}/Secrets`, {
        //         secretPath: `/${props.stage}/${app.name}`,
        //         secretsNames: app.parameterStoreSecrets,
        //     });
        //
        //     new EcsServiceConstruct(this, app.name, {
        //         serviceName: app.name,
        //         containerPort: app.port,
        //         containerImage: ContainerImage.fromAsset(app.dockerImagePath),
        //         memoryLimit: app.memory,
        //         cpuLimit: app.cpu,
        //         secrets: secrets.secrets,
        //         cluster,
        //         vpc,
        //         lb,
        //         ecr,
        //     });
        // });
    }
}
