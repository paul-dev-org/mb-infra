"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs");
const fp_1 = require("../utils/fp");
const files_1 = require("../conts/files");
const config_ops_1 = require("../utils/config-ops");
const createWorkflows = () => {
    const workflowsPath = ".github/workflows";
    if (!fs.existsSync(workflowsPath)) {
        fs.mkdirSync(workflowsPath, { recursive: true });
        console.log("Workflows directory created");
    }
    else {
        console.log(`Workflows directory already exists`);
    }
    const config = (0, fp_1.pipe)(`${process.cwd()}/${files_1.FILES.INFRA_CONFIG}`, config_ops_1.checkIfConfigFileExists, config_ops_1.readConfigFile);
    const { apps } = (0, fp_1.pipe)(`${process.cwd()}/${files_1.FILES.INFRA_CONFIG}`, config_ops_1.checkIfConfigFileExists, config_ops_1.readConfigFile);
    const serviceA = apps[0];
    const serviceB = apps[1];
    const releasePleaseTemplate = fs.readFileSync(path.resolve(__dirname, "release-please.yaml"), "utf8");
    const findReg = new RegExp("{{service_a}}", "g");
    const replacedA = releasePleaseTemplate.replace(findReg, serviceA.name);
    const findRegB = new RegExp("{{service_b}}", "g");
    const relFinal = replacedA.replace(findRegB, serviceB.name);
    const deployTemplate = fs.readFileSync(path.resolve(__dirname, "deploy.yaml"), "utf8");
    const replacedDeployA = deployTemplate.replace(findReg, serviceA.name);
    const replacedDeployB = replacedDeployA.replace(findRegB, serviceB.name);
    fs.writeFileSync(path.resolve(workflowsPath, "release-please.yaml"), relFinal);
    fs.writeFileSync(path.resolve(workflowsPath, "deploy.yaml"), replacedDeployB);
    console.log("\x1b[43m\x1b[30m%s\x1b[0m", "IMPORTANT");
    console.log("\x1b[43m\x1b[30m%s\x1b[0m", "Make sure to create environment stg and prd in the github repository settings");
    console.log("\x1b[43m\x1b[30m%s\x1b[0m", "Add people to the environment protection rules");
};
createWorkflows();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2Zsb3ctaW5pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndvcmtmbG93LWluaXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2QkFBNkI7QUFDN0IseUJBQXlCO0FBQ3pCLG9DQUFtQztBQUVuQywwQ0FBdUM7QUFDdkMsb0RBQThFO0FBRTlFLE1BQU0sZUFBZSxHQUFHLEdBQUcsRUFBRTtJQUN6QixNQUFNLGFBQWEsR0FBRyxtQkFBbUIsQ0FBQztJQUMxQyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO1FBQ2hDLEVBQUUsQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDakQsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO0lBQy9DLENBQUM7U0FBTSxDQUFDO1FBQ0osT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFDRCxNQUFNLE1BQU0sR0FBRyxJQUFBLFNBQUksRUFDZixHQUFHLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxhQUFLLENBQUMsWUFBWSxFQUFFLEVBQ3hDLG9DQUF1QixFQUN2QiwyQkFBYyxDQUNqQixDQUFDO0lBRUYsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUEsU0FBSSxFQUNqQixHQUFHLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxhQUFLLENBQUMsWUFBWSxFQUFFLEVBQ3hDLG9DQUF1QixFQUN2QiwyQkFBYyxDQUNqQixDQUFDO0lBRUYsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV6QixNQUFNLHFCQUFxQixHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUscUJBQXFCLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN0RyxNQUFNLE9BQU8sR0FBRyxJQUFJLE1BQU0sQ0FBQyxlQUFlLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDakQsTUFBTSxTQUFTLEdBQUcscUJBQXFCLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEUsTUFBTSxRQUFRLEdBQUcsSUFBSSxNQUFNLENBQUMsZUFBZSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2xELE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUU1RCxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLGFBQWEsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3ZGLE1BQU0sZUFBZSxHQUFHLGNBQWMsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN2RSxNQUFNLGVBQWUsR0FBRyxlQUFlLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFekUsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxxQkFBcUIsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQy9FLEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsYUFBYSxDQUFDLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFFOUUsT0FBTyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUN0RCxPQUFPLENBQUMsR0FBRyxDQUNQLDJCQUEyQixFQUMzQiwrRUFBK0UsQ0FDbEYsQ0FBQztJQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTJCLEVBQUUsZ0RBQWdELENBQUMsQ0FBQztBQUMvRixDQUFDLENBQUM7QUFFRixlQUFlLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHBhdGggZnJvbSBcInBhdGhcIjtcbmltcG9ydCAqIGFzIGZzIGZyb20gXCJmc1wiO1xuaW1wb3J0IHsgcGlwZSB9IGZyb20gXCIuLi91dGlscy9mcFwiO1xuaW1wb3J0IHsgSW5mcmFDb25maWcgfSBmcm9tIFwiLi4vc2NoZW1hcy9pbmZyYS5jb25maWdcIjtcbmltcG9ydCB7IEZJTEVTIH0gZnJvbSBcIi4uL2NvbnRzL2ZpbGVzXCI7XG5pbXBvcnQgeyBjaGVja0lmQ29uZmlnRmlsZUV4aXN0cywgcmVhZENvbmZpZ0ZpbGUgfSBmcm9tIFwiLi4vdXRpbHMvY29uZmlnLW9wc1wiO1xuXG5jb25zdCBjcmVhdGVXb3JrZmxvd3MgPSAoKSA9PiB7XG4gICAgY29uc3Qgd29ya2Zsb3dzUGF0aCA9IFwiLmdpdGh1Yi93b3JrZmxvd3NcIjtcbiAgICBpZiAoIWZzLmV4aXN0c1N5bmMod29ya2Zsb3dzUGF0aCkpIHtcbiAgICAgICAgZnMubWtkaXJTeW5jKHdvcmtmbG93c1BhdGgsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICAgICAgICBjb25zb2xlLmxvZyhcIldvcmtmbG93cyBkaXJlY3RvcnkgY3JlYXRlZFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhgV29ya2Zsb3dzIGRpcmVjdG9yeSBhbHJlYWR5IGV4aXN0c2ApO1xuICAgIH1cbiAgICBjb25zdCBjb25maWcgPSBwaXBlPHN0cmluZywgSW5mcmFDb25maWc+KFxuICAgICAgICBgJHtwcm9jZXNzLmN3ZCgpfS8ke0ZJTEVTLklORlJBX0NPTkZJR31gLFxuICAgICAgICBjaGVja0lmQ29uZmlnRmlsZUV4aXN0cyxcbiAgICAgICAgcmVhZENvbmZpZ0ZpbGVcbiAgICApO1xuXG4gICAgY29uc3QgeyBhcHBzIH0gPSBwaXBlPHN0cmluZywgSW5mcmFDb25maWc+KFxuICAgICAgICBgJHtwcm9jZXNzLmN3ZCgpfS8ke0ZJTEVTLklORlJBX0NPTkZJR31gLFxuICAgICAgICBjaGVja0lmQ29uZmlnRmlsZUV4aXN0cyxcbiAgICAgICAgcmVhZENvbmZpZ0ZpbGVcbiAgICApO1xuXG4gICAgY29uc3Qgc2VydmljZUEgPSBhcHBzWzBdO1xuICAgIGNvbnN0IHNlcnZpY2VCID0gYXBwc1sxXTtcblxuICAgIGNvbnN0IHJlbGVhc2VQbGVhc2VUZW1wbGF0ZSA9IGZzLnJlYWRGaWxlU3luYyhwYXRoLnJlc29sdmUoX19kaXJuYW1lLCBcInJlbGVhc2UtcGxlYXNlLnlhbWxcIiksIFwidXRmOFwiKTtcbiAgICBjb25zdCBmaW5kUmVnID0gbmV3IFJlZ0V4cChcInt7c2VydmljZV9hfX1cIiwgXCJnXCIpO1xuICAgIGNvbnN0IHJlcGxhY2VkQSA9IHJlbGVhc2VQbGVhc2VUZW1wbGF0ZS5yZXBsYWNlKGZpbmRSZWcsIHNlcnZpY2VBLm5hbWUpO1xuICAgIGNvbnN0IGZpbmRSZWdCID0gbmV3IFJlZ0V4cChcInt7c2VydmljZV9ifX1cIiwgXCJnXCIpO1xuICAgIGNvbnN0IHJlbEZpbmFsID0gcmVwbGFjZWRBLnJlcGxhY2UoZmluZFJlZ0IsIHNlcnZpY2VCLm5hbWUpO1xuXG4gICAgY29uc3QgZGVwbG95VGVtcGxhdGUgPSBmcy5yZWFkRmlsZVN5bmMocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgXCJkZXBsb3kueWFtbFwiKSwgXCJ1dGY4XCIpO1xuICAgIGNvbnN0IHJlcGxhY2VkRGVwbG95QSA9IGRlcGxveVRlbXBsYXRlLnJlcGxhY2UoZmluZFJlZywgc2VydmljZUEubmFtZSk7XG4gICAgY29uc3QgcmVwbGFjZWREZXBsb3lCID0gcmVwbGFjZWREZXBsb3lBLnJlcGxhY2UoZmluZFJlZ0IsIHNlcnZpY2VCLm5hbWUpO1xuXG4gICAgZnMud3JpdGVGaWxlU3luYyhwYXRoLnJlc29sdmUod29ya2Zsb3dzUGF0aCwgXCJyZWxlYXNlLXBsZWFzZS55YW1sXCIpLCByZWxGaW5hbCk7XG4gICAgZnMud3JpdGVGaWxlU3luYyhwYXRoLnJlc29sdmUod29ya2Zsb3dzUGF0aCwgXCJkZXBsb3kueWFtbFwiKSwgcmVwbGFjZWREZXBsb3lCKTtcblxuICAgIGNvbnNvbGUubG9nKFwiXFx4MWJbNDNtXFx4MWJbMzBtJXNcXHgxYlswbVwiLCBcIklNUE9SVEFOVFwiKTtcbiAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgXCJcXHgxYls0M21cXHgxYlszMG0lc1xceDFiWzBtXCIsXG4gICAgICAgIFwiTWFrZSBzdXJlIHRvIGNyZWF0ZSBlbnZpcm9ubWVudCBzdGcgYW5kIHByZCBpbiB0aGUgZ2l0aHViIHJlcG9zaXRvcnkgc2V0dGluZ3NcIlxuICAgICk7XG4gICAgY29uc29sZS5sb2coXCJcXHgxYls0M21cXHgxYlszMG0lc1xceDFiWzBtXCIsIFwiQWRkIHBlb3BsZSB0byB0aGUgZW52aXJvbm1lbnQgcHJvdGVjdGlvbiBydWxlc1wiKTtcbn07XG5cbmNyZWF0ZVdvcmtmbG93cygpO1xuIl19